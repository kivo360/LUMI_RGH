{
  "name": "layers",
  "description": "A package to help layered architecture for node.js",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/dave-elkan/layers"
  },
  "author": {
    "name": "Dave Elkan",
    "email": "dave@edave.net",
    "url": "http://www.edave.net"
  },
  "contributors": [
    {
      "name": "Dave Elkan",
      "email": "dave@edave.net"
    }
  ],
  "directories": {
    "lib": "lib"
  },
  "dependecies": {
    "expresso": "0.7.7"
  },
  "scripts": {
    "test": "expresso test/*.js"
  },
  "keywords": [
    "layers",
    "layered",
    "express",
    "connect",
    "web",
    "mvc",
    "architecture"
  ],
  "main": "index",
  "engines": {
    "node": ">= 0.4.1 < 0.5.0"
  },
  "readme": "# Node Layers\n\nNode Layers is a helper module for [nodejs](http://nodejs.org) web apps. It will\nautomatically load and loosely couple the layers of your web app.\n\nIf you prefer a real-world implementation rather than abstract documentation\nplease see [Layered Express](https://github.com/dave-elkan/layered-express).\n\nNode Layers does not strictly prescribe which layers it supports. Instead it\nfacilitates the loading of the files which make up your web app running them \n(if they're functions) or simply loading them if they're plain old javascript\nobjects and adding them as properties of your app/server object.\n\nThe app is then passed to the wiring function (see below) which wires up the \nlayers of your application.\n\nCurrently the only supported framework is Express, however Node Layers has been\ndesigned to be extended to work with any framework. Feel free to submit a patch.\n\n## Installation\n\nTo install Node Layers:\n\n    $ npm install layers\n\n## Usage\n\nThe Layers module accepts a server object (or app in the case of Express), \nthe path to the files making up your layers and a function which will return\nthe routes definition object (see Wiring section below).\n\ni.e. for Express:\n\n    var Layers = require('layers').Express,\n\t\twiring = require('./layers/wiring');\n    new Layers(app, __dirname + '/layers', wiring);\n\n## Loading Layers\n\nEach directory nested immediately within the layers directory defines a layer.\n\nEach of these layer directories are recursively scanned for javascript files which are imported using require. The result of the require is inspected for two possibilities: \n\n* An object\n* A function which returns an object.\n\nThe object loaded or returned from the function is appended to the app object under the layer's namespace.\n \ne.g.\n \n/path/to/app/layers/controllers/BookController.js becomes app.controllers.bookController\n/path/to/app/layers/services/AuthorService.js becomes app.services.authorService\n\nOne exception is made when loading the layer files: Any file whose name begins with \"Base\" is ignored.\nThis name can be overriden by specifying the `excludePrefix` option.\n\ni.e. \n\n    new Layers(app, __dirname + '/layers', routes, {\n\t\texcludePrefix: \"Abstract\"\n\t});\n\n## Wiring\n\nTo wire the layers together you need to create a 'wiring' function. \nThis function takes the layer populated app object as it's only parameter \nand returns a hash of arrays indexed by the route they service.\n\ni.e.\n\n\t`module.exports = function(app) {\n\t\tvar controllers = app.controllers,\n\t\t\tviews = app.views;\n\t\treturn {\n   \t\t\t\"/\": [{\n   \t\t\t\t\taction: controllers.homeController.homeGetAction,\n   \t\t\t\t\tviews: {\n\t\t\t\t\t\thtml: views.homeView,\n\t\t\t\t\t\tjson: views.jsonView\n\t   \t\t\t\t}\n   \t\t\t\t}, {\n\t\t\t\t\tmethod: \"post\",\n\t\t\t\t\taction: controllers.homeController.homePostAction,\n\t\t\t\t\tviews: {\n\t\t\t\t\t\tjson: views.jsonView\n\t\t\t\t\t}\n\t\t\t\t}\n\t   \t\t],\n\n   \t\t\t\"/path/of/route\": [{\n\t\t\t\t\taction: controllers.someController.doesSomething,\n\t\t\t\t\tviews: {\n\t\t\t\t\t\thtml: views.someView,\n\t\t\t\t\t\tjson: views.jsonView\n\t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t]\n\t\t}\n\t}`\n\nThe format of the wiring object is important. Each route supports many \nhandlers which all have to define Action and View properties.\n\nThe method property is optional and defaults to 'get'.\n\n## Actions\n\nA handler's action property is simply a reference to a function which accepts a \nrequest and response objects as well as a callback and next function. They are \ncalled in the context of the app object which allows for easy access to all of the other layers.\n\nAction functions generally belong to the Controller layer. They are responsible for pulling \nvariables from the request, their validation and sending them to the Service layer. \nThe following contrived example does not allow any '1s' in the Author's key.\n\nYou will also notice that this controller simply delegates to the service layer, but at the same time it shields it from the request and response objects.\n\nThe callback variable which is owned and created by Layers is passed straight through to the service layer. \nIt accepts the result of the service or an Error.\n\ni.e.\n\n\tmodule.exports = {\n    \n\t    displayAuthorList: function(req, res, callback) {\n\t        this.services.authorService.getList(callback);\n\t    },\n\n\t    displayAuthorByKey: function(req, res, callback, next) {\n\t        var authorKey = req.params.key;\n\t        if (authorKey.indexOf(\"1\") > -1) {\n\t            callback(new Error(\"No ones allowed!\"));\n\t        } else {\n\t            this.services.authorService.getAuthorAndTheirBooks(authorKey, callback);            \n\t        }\n\t    }\n\t};\n\n## Views\n\nViews are wrappers around your favourite templating system. They accept the request and response objects and the result of the handler's action.\n\nBaseExpressView can be used as a basis for your own Express (jade) Views. You only need to specify the \"getTemplate\" function.\n\n## Error View\n\nNode Layers supplies an ErrorView function which is be used by default to display errors.\nIt is advisable that you define your own ErrorView function so you can better \ndisplay errors as you see fit when they occur.\n\n## License\n\n(The MIT License)\n\nCopyright (C) 2011 by Dave Elkan &lt;dave@edave.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/dave-elkan/layers/issues"
  },
  "_id": "layers@0.0.3",
  "dist": {
    "shasum": "dc25811a79b51399cd0767cdd0f58ba931efe845"
  },
  "_from": "layers@",
  "_resolved": "https://registry.npmjs.org/layers/-/layers-0.0.3.tgz"
}
